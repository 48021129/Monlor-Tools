#---------------【ShadowSocks】-----------------
shadowsocksAdd() {
	ciphers="aes-256-gcm aes-192-gcm aes-128-gcm aes-256-ctr aes-192-ctr aes-128-ctr aes-256-cfb aes-192-cfb aes-128-cfb camellia-128-cfb camellia-192-cfb camellia-256-cfb xchacha20-ietf-poly1305 chacha20-ietf-poly1305 chacha20-ietf chacha20 salsa20 rc4-md5"
	protocols="origin verify_deflate auth_sha1_v4 auth_aes128_md5 auth_aes128_sha1 auth_chain_a auth_chain_b auth_chain_c auth_chain_d auth_chain_e auth_chain_f"
	obfs="plain http_simple http_post tls1.2_ticket_auth tls1.2_ticket_fastauth"
	read -p "输入$appname(r)节点名：" ss_id
	[ -z "$ss-id" ] && return
	read -p "输入$appname服务器地址：" ss_server
	read -p "输入$appname服务器端口：" ss_port
	read -p "输入$appname服务器密码：" ss_passwd
	
	echo "选择加密方式(不一定都支持)："
	echo $ciphers | tr " " "\n" | grep -n . | sed -e "s/:/) /g"
	read -p "输入$appname加密方式(选择或输入)：" ss_method
	if [ -n "$(echo $ss_method | grep "[0-9][0-9]*")" ]; then
		ss_method="$(echo $ciphers | tr " " "\n" | sed -n "$ss_method"p)"
		[ -z "$ss_method" ] && echo "输入错误！" && return
	fi

	echo "选择ssr协议(不一定都支持)："
	echo $protocols | tr " " "\n" | grep -n . | sed -e "s/:/) /g"
	read -p "输入$appname协议protocols(ss请回车)：" ss_protocol
	if [ -n "$(echo $ss_protocol | grep "[0-9][0-9]*")" -a -n "$ss_protocol" ]; then
		ss_protocol="$(echo $protocols | tr " " "\n" | sed -n "$ss_protocol"p)"
		[ -z "$ss_protocol" ] && echo "输入错误！" && return
	fi

	if [ ! -z "$ss_protocol" ]; then
		echo "选择ssr混淆(不一定都支持)："
		echo $obfs | tr " " "\n" | grep -n . | sed -e "s/:/) /g"
		read -p "输入$appname混淆obfs：" ss_obfs
		if [ -n "$(echo $ss_obfs | grep "[0-9][0-9]*")" -a -n "$ss_obfs" ]; then
			ss_obfs="$(echo $obfs | tr " " "\n" | sed -n "$ss_obfs"p)"
			[ -z "$ss_obfs" ] && echo "输入错误！" && return
		fi

		read -p "输入$appname协议参数protocol_param(没有请回车)：" ss_protocol_param
		read -p "输入$appname混淆参数obfs_param(没有请回车):" ss_obfs_param
	fi
	if [ ! -z "$ss_id" ]; then
		read -p "确定要添加节点：$ss_id,$ss_server,$ss_port,$ss_passwd,$ss_method...？[1/0] " res
		if [ "$res" == '1' ]; then
			sed -i "/^$ss_id,/d" $SSID.conf
			echo "$ss_id,$ss_server,$ss_port,$ss_passwd,$ss_method,$ss_protocol,$ss_obfs,$ss_protocol_param,$ss_obfs_param" >> $SSID.conf
		fi
	fi
	read -p "添加完成，再添加一个？[1/0] " res
	if checkread $res; then
		[ "$res" == '1' ] && shadowsocksAdd
	fi
}

shadowsocksDel() {

	echo "$appname节点："
	cat $SSID.conf | sed -e 's/.*/[&]/g' | grep -n . | sed -e 's/:/\./g' | while read line
	do
		[ "${#line}" -gt 70 ] && line="$(echo $line | cut -b 1-70)"...
		echo $line
	done
	read -p "请选择要删除的节点：" res
	[ -n "$res" ] && sed -i "$res"d $SSID.conf
	read -p "删除完成，继续删除？[1/0] " res
	if checkread $res; then
		[ "$res" == '1' ] && shadowsocksDel
	fi
}

shadowsocks() {

	eval `ucish export shadowsocks`
	SSID=$monlorpath/apps/$appname/config/ssserver
	black_list=$monlorpath/apps/$appname/config/customize_black.conf
	white_list=$monlorpath/apps/$appname/config/customize_white.conf
	[ ! -f $SSID.conf ] && touch $SSID.conf
	[ ! -f "$black_list" ] && touch $black_list
	[ ! -f "$white_list" ] && touch $white_list
	sslist=$(cat $SSID* | cut -d, -f1 | grep -n . | sed -e 's/:/./g')
	uciset="uci set monlor.$appname"
	$uciset=config && $uciset.service=$service
	control=$monlorpath/apps/$appname/config/sscontrol.conf
	[ ! -f "$control" ] && touch $control
	echo "********* $service ***********"
	echo "[最好的翻墙工具，没有之一，还可以加速国内外游戏]"
	read -p "启动$appname服务？[1/0] " enable
	checkread $enable && $uciset.enable="$enable" || $uciset.enable="0"
	if [ "$enable" == '1' ]; then
		# [ -z "$sslist" ] && sslist="空"
		# echo "$appname节点：[`echo $sslist`]"
		read -p "添加$appname节点？[1/0] " res
		if [ "$res" == '1' ]; then
			read -p "选择添加方式[1.手动添加 2.订阅地址 3.uri地址] " res
			if [ "$res" == '1' ]; then
				shadowsocksAdd
			elif [ "$res" == '2' ]; then
				ssr_subscribe_link=$(uci -q get monlor.$appname.ssr_subscribe_link)
				[ -n "$ssr_subscribe_link" ] && echo "[$ssr_subscribe_link]"
				read -p "请输入ssr节点订阅地址(回车移除地址)：" res
				uci set monlor.$appname.ssr_subscribe_link="$res"
				if [ ! -z "$res" ]; then
					$monlorpath/apps/$appname/script/ss_online_update.sh
				else
					rm -rf $SSID_online.conf
				fi
			elif [ "$res" == '3' ]; then
				read -p "请输入ssr节点uri地址：" res
				if [ ! -z "$res" ]; then
					$monlorpath/apps/$appname/script/ss_online_update.sh add "$res"
				fi
			fi
		fi
		sslist=$(cat $SSID* | cut -d, -f1 | grep -n . | sed -e 's/:/./g')
		id=$(uci -q get monlor.$appname.id)
		ss_mode=$(uci -q get monlor.$appname.ss_mode)
		[ -z "$id" ] && id="空"
		[ -z $ss_mode ] && ss_mode="空"
		read -p "修改$appname配置($id, $ss_mode)？[1/0] " res
		if [ "$res" == '1' ]; then
			# [ -z "$sslist" ] && sslist="空"
			echo "$appname节点："
			cat $SSID* | sed -e 's/.*/[&]/g' | grep -n . | sed -e 's/:/\./g' | while read line
			do
				[ "${#line}" -gt 70 ] && line="$(echo $line | cut -b 1-70)"...
				echo $line
			done
			read -p "请选择$appname节点：" res
			if [ -n "$res" ]; then
				id=$(cat $SSID* | cut -d, -f1 | sed -n "$res"p)
				[ ! -z "$id" ] && $uciset.id="$id"
			fi

			echo "[1.黑名单模式 2.白名单模式 3.全局模式 4.回国模式]"
			read -p "请选择$appname模式：" res
			if [ ! -z "$res" ]; then
				case "$res" in
					1) res="gfwlist" ;;
					2) res="whitelist" ;;
					3) res="wholemode" ;;
					4) res="homemode" ;;
					*) res="gfwlist" ;;
				esac
				$uciset.ss_mode="$res"
			fi
		fi
		read -p "进入$appname高级设置？[1/0] " res
		if [ "$res" == '1' ]; then
			read -p "删除$appname节点？[1/0] " res
			[ "$res" == '1' ] && shadowsocksDel
			read -p "启动$appname游戏模式？[1/0] " res
			checkread $res && $uciset.ssgena="$res" 
			if [ "$res" == '1' ]; then
				ssgid=$(uci -q get monlor.$appname.ssgid)
				ssg_mode=$(uci -q get monlor.$appname.ssg_mode)
				[ -z "$ssgid" ] && ssgid="空"
				[ -z "$ssg_mode" ] && ssg_mode="空"
				read -p "修改$appname游戏配置($ssgid, $ssg_mode)？[1/0] " res
				if [ "$res" == '1' ]; then
					echo "$appname节点："
					cat $SSID* | sed -e 's/.*/[&]/g' | grep -n . | sed -e 's/:/\./g' | while read line
					do
						[ "${#line}" -gt 70 ] && line="$(echo $line | cut -b 1-70)"...
						echo $line
					done
					read -p "请选择$appname游戏节点：" res
					ssgid=$(cat $SSID* | cut -d, -f1 | sed -n "$res"p)
					[ ! -z "$ssgid" ] && $uciset.ssgid="$ssgid"
					
					echo "[1.国内游戏 2.国外游戏]"
					read -p "请选择$appname游戏模式：" res
					if [ ! -z "$res" ]; then
						case "$res" in
							1) res="cngame" ;;
							2) res="frgame" ;;
							*) res="frgame" ;;
						esac
						$uciset.ssg_mode="$res"
					fi
				fi
			fi
			# 显示局域网控制
			cat $control | while read line
			do
				name=$(cutsh $line 1)
				mode=$(cutsh $line 3)
				case "$mode" in
					0) mode="不走代理" ;;
					1) mode="科学上网" ;;
					*) mode="空" ;;
				esac
				echo "设备[$name]运行模式为: $mode"
			done
			mode=$(uci -q get monlor.$appname.ss_acl_default_mode)
			case "$mode" in
				0) mode="不走代理" ;;
				1) mode="科学上网" ;;
				*) mode="科学上网" ;;
			esac
			echo "其余设备运行模式为: $mode"
			read -p "设置局域网代理控制？[1/0] " res
			if [ "$res" == '1' ]; then
				read -p "清空之前的配置再添加？[1/0] " res
				[ "$res" == '1' ] && echo -n > $control
				i=0
				cat /tmp/dhcp.leases | while read line
				do
					name=$(echo $line | cut -d' ' -f4)
					mac=$(echo $line | cut -d' ' -f2)
					ip=$(echo $line | cut -d' ' -f3)

					let i=$i+1
					echo "$i. $name [$ip] [$mac]"
					
				done
				while(true) 
				do
					read -p "请选择一个设备：" res
					if [ ! -z "$res" ]; then
						line=$(cat /tmp/dhcp.leases | grep -n . | grep -w "^$res")
						name=$(echo $line | cut -d' ' -f4)
						mac=$(echo $line | cut -d' ' -f2)
						read -p "请选择代理模式(0.不走代理 1.科学上网)：" ssproxy
						read -p "请选择游戏模式(0.不走游戏 1.游戏加速)：" ssgame
						if checkread $ssproxy; then
							if [ ! -z "$mac" ]; then
								[ -z "$ssgame" ] && ssgame=0
								sed -i "/^$name,$mac/d" $control
								echo "$name,$mac,$ssproxy,$ssgame" >> $control
							else
								echo "mac不能为空, 添加失败！"
							fi
						else
							echo "输入有误, 添加失败"
						fi
					else
						echo "未找到设备, 添加失败！"
					fi
					read -p "继续增加设备？[1/0] " res
					[ "$res" == '0' -o -z "$res" ] && break
				done
				read -p "请选择其余设备代理模式(0.不走代理 1.科学上网)：" ssproxy
				checkread $ssproxy && $uciset.ss_proxy_default_mode="$ssproxy"
				read -p "请选择其余设备游戏模式(0.不走游戏 2.游戏加速)：" ssgame
				checkread $ssgame && $uciset.ss_game_default_mode="$ssgame"

			fi
			read -p "添加自定义规则(支持ip和域名)？[1/0] " res
			if [ "$res" == '1' ]; then
				read -p "添加黑名单规则？[1/0] " res
				if [ "$res" == '1' ]; then
					echo "黑名单规则列表："
					cat $black_list
					read -p "请选择添加方式(1.覆盖添加 2.追加规则)：" res
					[ "$res" == '1' ] && echo -n > $black_list
					while(true)
					do
						read -p "输入域名网址(exit结束输入)：" res
						[ "$res" == "exit" -o -z "$res" ] && break
						echo "$res" >> $black_list
					done	
				fi
				read -p "添加白名单规则？[1/0] " res
				if [ "$res" == '1' ]; then
					echo "白名单规则列表："
					cat $white_list
					read -p "请选择添加方式(1.覆盖添加 2.追加规则)：" res
					[ "$res" == '1' ] && echo -n > $white_list
					while(true)
					do
						read -p "输入域名网址(exit结束输入)：" res
						[ "$res" == "exit" -o -z "$res" ] && break
						echo "$res" >> $white_list
					done
				fi
			fi
			[ "$dns_red_enable" != '1' ] && dns_red_text="不重定向" || dns_red_text="重定向"
			[ -z "$DNS_SERVER" ] && DNS_SERVER=8.8.8.8
			[ -z "$DNS_SERVER_PORT" ] && DNS_SERVER_PORT=53
			read -p "修改DNS配置($dns_red_text, $DNS_SERVER, $DNS_SERVER_PORT)？[1/0] " res
			if [ "$res" == '1' ]; then
				read -p "启用DNS重定向？[1/0] " res
				[ -n "$res" ] && $uciset.dns_red_enable="$res"
				if [ "$res" == '1' ]; then
					[ -z "$dns_red_ip" ] && dns_red_ip="$lanip"
					read -p "修改DNS重定向IP地址($dns_red_ip)：" res  
					[ -n "$res" ] && $uciset.dns_red_ip="$res"
				fi
				read -p "输入代理使用DNS服务器($DNS_SERVER)：" res
				[ -n "$res" ] && $uciset.DNS_SERVER="$res"
				read -p "输入代理使用DNS端口号($DNS_SERVER_PORT)：" res
				[ -n "$res" ] && $uciset.DNS_SERVER_PORT="$res"
			fi
		fi
		$monlorpath/apps/$appname/script/$appname.sh restart
	else
		$monlorpath/apps/$appname/script/$appname.sh stop
	fi


}
#---------------【ShadowSocks】-----------------